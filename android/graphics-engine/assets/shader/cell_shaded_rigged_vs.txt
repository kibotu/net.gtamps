#version 150

//
// Vertex Shader for Skeletal Animation and Cell-Shading.
// Supports 4 bones per vertex.
// - James Lammlein
//

uniform mat4  u_WorldView;		// we need vector from vertex to eye
uniform mat4  u_WorldViewProjection;	// normal transform for vertex
uniform vec3  u_LightDirection;
uniform float u_BoneScale[128];
uniform mat4  u_BoneTransform[128];

in  vec3  in_Position;
in  vec3  in_Normal;
in  vec2  in_TexCoords;
in  vec4  in_BoneID;
in  vec4  in_Weights;

out vec3 v_VertexToLight;
out vec3 v_Normal;
out vec2 v_TexCoords;

void main(void)
{
    // Transform the vertex information based on bones.
    vec3 position = (in_Weights[0] * (u_BoneTransform[ int(in_BoneID[0]) ] * vec4(in_Position, 1.0)).xyz) +
                    (in_Weights[1] * (u_BoneTransform[ int(in_BoneID[1]) ] * vec4(in_Position, 1.0)).xyz) +
                    (in_Weights[2] * (u_BoneTransform[ int(in_BoneID[2]) ] * vec4(in_Position, 1.0)).xyz) +
                    (in_Weights[3] * (u_BoneTransform[ int(in_BoneID[3]) ] * vec4(in_Position, 1.0)).xyz);

    vec3 normal =   (in_Weights[0] * (u_BoneTransform[ int(in_BoneID[0]) ] * vec4(in_Normal, 0.0)).xyz) +
                    (in_Weights[1] * (u_BoneTransform[ int(in_BoneID[1]) ] * vec4(in_Normal, 0.0)).xyz) +
                    (in_Weights[2] * (u_BoneTransform[ int(in_BoneID[2]) ] * vec4(in_Normal, 0.0)).xyz) +
                    (in_Weights[3] * (u_BoneTransform[ int(in_BoneID[3]) ] * vec4(in_Normal, 0.0)).xyz);

    // The normal graphic's pipeline transform.
    gl_Position = u_WorldViewProjection * vec4( position, 1.0 );

    // Required for phong lighting
    vec3 viewLightDirection = ( u_WorldView * vec4(u_LightDirection, 0.0) ).xyz;
    v_VertexToLight = normalize( viewLightDirection );

    // Only take to view space
    v_Normal = ( u_WorldView * vec4(normal, 0.0) ).xyz;
    v_Normal = normalize( v_Normal );

    v_TexCoords = in_TexCoords;
}