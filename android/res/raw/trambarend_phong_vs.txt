// Uniform variables. Set from the application.
uniform mat4 modelMatrix;
uniform mat4 viewMatrix; // The inverse camera transform.
uniform mat4 projectionMatrix;
uniform vec3 lightPositionV;

// Vertex attributes form the mesh.
attribute vec3 vertex;
attribute vec3 normal;
attribute vec3 color;

// Output for the fragment shader.
varying vec3 fcolor;
varying vec3 normalV;
varying vec3 eyedirV;
varying vec3 lightdirV;

// The main entry point.
void main() {
  // Pass the color to the fragment shader unchanged.
  fcolor = color;

  // Transform to camera coordinates.
  normalV = (viewMatrix * modelMatrix * vec4(normal, 0.0)).xyz;
  vec3 vertexV = (viewMatrix * modelMatrix * vec4(vertex, 1.0)).xyz;

  // Calculate values in camera coordinates.
  eyedirV = -vertexV;
  lightdirV = lightPositionV - vertexV;

  // Transform the vertex position to NDC.
  gl_Position =  projectionMatrix *  viewMatrix *  modelMatrix *  vec4(vertex, 1);
}
